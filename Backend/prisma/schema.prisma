generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Company {
  id                     String            @id @default(cuid())
  name                   String
  country                String
  currency               String            @default("USD")
  sequentialApproval     Boolean           @default(false)
  minimumApprovalPercent Int               @default(50)
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  rules                  ApprovalRule[]
  categories             ExpenseCategory[]
  expenses               Expense[]
  users                  User[]

  @@map("companies")
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  name             String
  password         String
  role             Role              @default(EMPLOYEE)
  companyId        String
  isApprover       Boolean           @default(false)
  approverLevel    Int?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdRules     ApprovalRule[]    @relation("CreatedApprovalRules")
  approvedExpenses ExpenseApproval[] @relation("ApproverExpenses")
  expenses         Expense[]
  company          Company           @relation(fields: [companyId], references: [id])

  @@map("users")
}

model ExpenseCategory {
  id          String    @id @default(uuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  companyId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  expenses    Expense[]

  @@unique([name, companyId])
  @@map("expense_categories")
}

model Expense {
  id               String            @id @default(cuid())
  description      String
  amount           Float
  originalAmount   Float?
  originalCurrency String?
  exchangeRate     Float?
  currency         String            @default("USD")
  expenseDate      DateTime
  receiptUrl       String?
  merchantName     String?
  notes            String?
  ocrData          Json?
  status           ExpenseStatus     @default(PENDING)
  currentStep      Int               @default(1)
  totalSteps       Int               @default(1)
  submittedAt      DateTime?
  isReadonly       Boolean           @default(false)
  userId           String
  companyId        String
  categoryId       String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  approvals        ExpenseApproval[]
  category         ExpenseCategory?  @relation(fields: [categoryId], references: [id])
  company          Company           @relation(fields: [companyId], references: [id])
  user             User              @relation(fields: [userId], references: [id])

  @@map("expenses")
}

model ExpenseApproval {
  id         String         @id @default(cuid())
  expenseId  String
  approverId String
  step       Int
  status     ApprovalStatus @default(PENDING)
  comments   String?
  approvedAt DateTime?
  rejectedAt DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  approver   User           @relation("ApproverExpenses", fields: [approverId], references: [id])
  expense    Expense        @relation(fields: [expenseId], references: [id])

  @@unique([expenseId, approverId])
  @@map("expense_approvals")
}

model ApprovalRule {
  id          String         @id @default(cuid())
  name        String
  description String?
  minAmount   Float?
  maxAmount   Float?
  categoryIds String[]
  isActive    Boolean        @default(true)
  companyId   String
  createdById String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  company     Company        @relation(fields: [companyId], references: [id])
  createdBy   User           @relation("CreatedApprovalRules", fields: [createdById], references: [id])
  steps       ApprovalStep[]

  @@map("approval_rules")
}

model ApprovalStep {
  id        String       @id @default(uuid())
  ruleId    String
  userId    String
  step      Int
  createdAt DateTime     @default(now())
  rule      ApprovalRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)

  @@unique([ruleId, step])
  @@map("approval_steps")
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum Role {
  EMPLOYEE
  MANAGER
  ADMIN
}

enum ExpenseStatus {
  PENDING
  IN_PROGRESS
  APPROVED
  REJECTED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ApprovalRuleType {
  SEQUENTIAL
  PERCENTAGE
  SPECIFIC_APPROVER
  HYBRID
}
